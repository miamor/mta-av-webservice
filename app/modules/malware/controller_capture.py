from app.modules.common.controller import Controller
from .capture import Capture
from sqlalchemy import text
from app.app import db
from app.settings.config import Config
# import datetime
import json
import app.settings.cf as cf

class ControllerCapture(Controller):
    def create(self, data):
        malware = self._parse_malware(data=data, malware=None)
        db.session.add(malware)
        db.session.commit()
        return malware

    def get(self, mode):
        # print('~~~~~~ mode', mode)
        if mode == 1:
            cmd = db.select([Capture.capture_id, Capture.file_name, Capture.file_size, Capture.hash, Capture.date_received, Capture.time_received, Capture.protocol, Capture.source_ip, Capture.destination_ip, Capture.detected_by]).where(Capture.detected_by != '').order_by(db.desc(Capture.capture_id))
            print('cmd', cmd)
        else:
            cmd = db.select([Capture.capture_id, Capture.file_name, Capture.file_size, Capture.hash, Capture.date_received, Capture.time_received, Capture.protocol, Capture.source_ip, Capture.destination_ip, Capture.detected_by]).order_by(db.desc(Capture.capture_id))
        engine = db.create_engine(Config.SQLALCHEMY_DATABASE_URI, {})
        connection = engine.connect()
        malwares = connection.execute(cmd).fetchall()
        return malwares
    
    def get_filter(self, mode, filters=None):
        print('~~~~~~ mode', mode, filters)
        cond = []
        if mode == 1:
            cond.append("detected_by != ''")
        for key in filters:
            if key != 'mode':
                print(key, filters[key])
                cond.append("{} = '{}'".format(key, filters[key]))
        cond_str = ' and '.join(cond)
        cmd = "select capture_id, file_name, file_size, hash, source_ip, destination_ip, protocol, date_received, time_received, detected_by from capture where "+cond_str
        print('cmd', cmd)
        engine = db.create_engine(Config.SQLALCHEMY_DATABASE_URI, {})
        connection = engine.connect()
        malwares = connection.execute(cmd).fetchall()
        return malwares

    def get_by_id(self, object_id):
        malware = Capture.query.filter_by(capture_id=object_id).first()
        return malware

    def get_report_by_id(self, report_id):
        # read report (if exist) to get behaviors
        report_path = cf.__CUCKOO_REPORT_DIR__+'/{}/reports/report.json'.format(report_id)
        with open(report_path, 'r') as f:
            return json.load(f)
        return {}

    def get_by_hash(self, object_hash, mode=0):
        # if mode == 2:
        #     malwares = Capture.query().filter_by(hash=object_hash).order_by(text('capture_id desc')).all()
        # else:
        #     malwares = Capture.query.filter_by(hash=object_hash).order_by(text('capture_id desc')).all()
        # print('~~~~~~ mode', mode)
        if mode == 2:
            cmd = db.select([Capture.capture_id, Capture.file_name, Capture.file_size, Capture.hash, Capture.date_received, Capture.time_received, Capture.protocol, Capture.source_ip, Capture.destination_ip, Capture.detected_by]).where(Capture.hash == object_hash).order_by(db.desc(Capture.capture_id))
            print('cmd', cmd)
        else:
            cmd = db.select([Capture.capture_id, Capture.file_name, Capture.file_size, Capture.hash, Capture.date_received, Capture.time_received, Capture.protocol, Capture.source_ip, Capture.destination_ip, Capture.detected_by]).where(Capture.hash == object_hash).order_by(db.desc(Capture.capture_id))
        engine = db.create_engine(Config.SQLALCHEMY_DATABASE_URI, {})
        connection = engine.connect()
        malwares = connection.execute(cmd).fetchall()
        return malwares

    def update(self, object_id, data):
        malware = Capture.query.filter_by(malware_id=object_id).first()
        malware = self._parse_malware(data=data, malware=malware)
        db.session.commit()
        return malware

    def delete(self, object_id):
        malware = Capture.query.filter_by(malware_id=object_id).first()
        db.session.delete(malware)
        db.session.commit()

    def gen_text_data(self, top_ip_mal, top_ip_send, top_ip_rev_mal, stat_date_tot):
        top_mal = []
        top_rev_mal = []
        top_send = []

        for r in top_ip_mal:
            top_mal.append({'ip': r[1], 'total': r[0]})
        for r in top_ip_send:
            top_send.append({'ip': r[1], 'total': r[0]})
        for r in top_ip_rev_mal:
            top_rev_mal.append({'ip': r[1], 'total': r[0]})

        texts = {
            'top_ip_mal': top_mal,
            'top_ip_send': top_send,
            'top_ip_rev_mal': top_rev_mal
        }

        return texts

    def gen_chart_data(self, top_ip_mal, top_ip_send, top_ip_rev_mal, stat_date_tot):
        top_mal_data = []
        top_mal_cat = []
        top_rev_mal_data = []
        top_rev_mal_cat = []
        top_send_data = []
        top_send_cat = []

        for r in top_ip_mal:
            if r[0] > 0:
                top_mal_data.append(r[0])
                top_mal_cat.append(r[1])
        for r in top_ip_send:
            # top_send.append({'r': r[1], 'total': r[0]})
            if r[0] > 0:
                top_send_data.append(r[0])
                top_send_cat.append(r[1])
        for r in top_ip_rev_mal:
            # top_rev_mal.append({'r': r[1], 'total': r[0]})
            if r[0] > 0:
                top_rev_mal_data.append(r[0])
                top_rev_mal_cat.append(r[1])

        # print('top_ip_msal', top_ip_mal)

        top_mal = {
            'series': [{
                'data': top_mal_data
            }],
            'options': {
                'plotOptions': {
                    'bar': {
                        'horizontal': True,
                    }
                },
                'dataLabels': {
                    'enabled': False
                },
                'xaxis': {
                    'categories': top_mal_cat,
                }
            },
        }

        top_rev_mal = {
            'series': [{
                'data': top_rev_mal_data
            }],
            'options': {
                'plotOptions': {
                    'bar': {
                        'horizontal': True,
                    }
                },
                'dataLabels': {
                    'enabled': False
                },
                'xaxis': {
                    'categories': top_rev_mal_cat,
                }
            },
        }

        top_send = {
            'series': [{
                'data': top_send_data
            }],
            'options': {
                'plotOptions': {
                    'bar': {
                        'horizontal': True,
                    }
                },
                'dataLabels': {
                    'enabled': False
                },
                'xaxis': {
                    'categories': top_send_cat,
                }
            },
        }

        charts = {
            'top_ip_mal': top_mal,
            'top_ip_send': top_send,
            'top_ip_rev_mal': top_rev_mal
        }

        return charts

    def stat(self):
        malwares_num = Capture.query.filter(Capture.detected_by != '').with_entities(Capture.hash).count()  # + 1324#distinct().count()
        benigns_num = Capture.query.filter(Capture.detected_by == '').with_entities(Capture.hash).count()  # + 1324#distinct().count()
        ip_malwares_num = Capture.query.filter(Capture.detected_by != '').with_entities(Capture.source_ip).distinct().count()  # + 129

        # top_ip_mal = Capture.query.filter(Capture.detected_by != '').with_entities(Capture.source_ip).distinct()
        top_ip_mal_cmd = db.select([db.func.sum(db.case([(Capture.detected_by != '', 1)], else_=0)).label('malwares_found'), Capture.source_ip]).where(Capture.source_ip.isnot(None)).group_by(Capture.source_ip).order_by(db.desc('malwares_found')).limit(5)

        top_ip_send_cmd = db.select([db.func.sum(Capture.file_size).label('bytes_sent'), Capture.source_ip]).group_by(Capture.source_ip).order_by(db.desc('bytes_sent')).order_by(db.desc('bytes_sent')).limit(5)

        top_ip_rev_mal_cmd = db.select([db.func.sum(db.case([(Capture.detected_by != '', 1)], else_=0)).label('malwares_found'), Capture.destination_ip]).group_by(Capture.destination_ip).where(Capture.destination_ip.isnot(None)).order_by(db.desc('malwares_found')).limit(5)
        # print('~~~~ top_ip_mal_cmd', top_ip_mal_cmd)
        # print('~~~~ top_ip_rev_mal_cmd', top_ip_rev_mal_cmd)

        stat_by_date_tot_cmd = db.select([
            # db.func.count(Capture.capture_id).label('total_files'), 
            db.func.sum(db.case([(Capture.detected_by == '', 1)], else_=0)).label('normals_found'), 
            # db.func.sum(db.case([(db.or_(Capture.detected_by == '', db.and_(Capture.detected_by.notlike('%virustotal%'), Capture.detected_by.notlike('%static%'), Capture.detected_by.notlike('%HAN_sec%'))), 1)], else_=0)).label('normals_found'), 
            # db.func.sum(db.case([(Capture.detected_by != '', 1)], else_=0)).label('malwares_found'), 
            db.func.sum(db.case([(db.or_(Capture.detected_by.like('%virustotal%'), Capture.detected_by.like('%static%'), Capture.detected_by.like('%HAN_sec%')), 1)], else_=0)).label('malwares_found'), 
            db.func.sum(db.case([(db.and_(Capture.detected_by != '', Capture.detected_by.notlike('%virustotal%'), Capture.detected_by.notlike('%static%'), Capture.detected_by.notlike('%HAN_sec%')), 1)], else_=0)).label('warnings_found'), 
            # db.func.MAX(Capture.time_received).label('time')
            db.func.FROM_UNIXTIME(db.func.FLOOR(db.func.UNIX_TIMESTAMP(
                # Capture.time_received
                db.func.timestamp(Capture.date_received, Capture.time_received)
            )/6000)*6000).label('time')
        ]).group_by(
            # db.func.MINUTE(Capture.time_received)
            'time'
        ).where(Capture.date_received.isnot(None)).order_by(db.asc('time'))

        # stat_by_date_mal_cmd = db.select([db.func.count(Capture.capture_id).label('mal_num'), db.func.MAX(Capture.time_received).label('time')]).group_by(db.func.MINUTE(Capture.time_received)).where(db.and_(Capture.date_received.isnot(None), Capture.detected_by != '')).order_by(db.asc('time'))

        # top_ip_mal = db.session.query(top_ip_mal_cmd)
        engine = db.create_engine(Config.SQLALCHEMY_DATABASE_URI, {})
        connection = engine.connect()
        top_ip_mal = connection.execute(top_ip_mal_cmd).fetchall()
        top_ip_send = connection.execute(top_ip_send_cmd).fetchall()
        top_ip_rev_mal = connection.execute(top_ip_rev_mal_cmd).fetchall()
        stat_date_tot = connection.execute(stat_by_date_tot_cmd).fetchall()
        # stat_date_mal = connection.execute(stat_by_date_mal_cmd).fetchall()

        # stat_data = self.gen_chart_data(top_ip_mal, top_ip_send, top_ip_rev_mal, stat_date_tot)
        stat_data = self.gen_text_data(top_ip_mal, top_ip_send, top_ip_rev_mal, stat_date_tot)

        stat_by_date_data_normal = []
        stat_by_date_data_mal = []
        stat_by_date_data_warnings = []
        stat_by_date_cat = []
        # print('stat_date_tot', stat_date_tot)
        # print('stat_date_mal', stat_date_mal)
        for k,r in enumerate(stat_date_tot):
            # stat_by_date.append({'date': r[1], 'total': r[0]})
            # r_m = stat_date_mal[k]
            # print(r[0], '~~~~~', r_m[0])
            if r[0] > 0 or r[1] > 0:
                stat_by_date_data_normal.append(r[0])
                # print('r[1]', r[1])
                stat_by_date_data_mal.append(r[1])
                stat_by_date_data_warnings.append(r[2])
                # stat_by_date_cat.append(r[2].strftime('%D, %H:%M'))
                stat_by_date_cat.append(r[3].strftime('%d/%m, %H:%M'))
                # value = datetime.timedelta(0, 64800)
                # time_val = (datetime.datetime.min + r[2]).time()
                # stat_by_date_cat.append(time_val)
        print('stat_by_date_cat', stat_by_date_cat)

        # stat_by_date = {
        #     'series': [{
        #         'data': stat_by_date_data_normal
        #     }],
        #     'options': {
        #         'plotOptions': {
        #             'bar': {
        #                 'horizontal': True,
        #             }
        #         },
        #         'dataLabels': {
        #             'enabled': False
        #         },
        #         'xaxis': {
        #             'categories': stat_by_date_cat,
        #         }
        #     },
        # }

        stat_by_date = {
            'series': [{
                # 'name': 'Total files',
                # 'type': 'column',
                'name': 'Benigns',
                'data': stat_by_date_data_normal
            }, {
                'name': 'Malwares',
                # 'type': 'line',
                'data': stat_by_date_data_mal
            }, {
                'name': 'Criticals',
                # 'type': 'line',
                'data': stat_by_date_data_warnings
            }],
            'cat': stat_by_date_cat
        }

        stat_data['stat_by_date'] = stat_by_date

        # print('stat_data', stat_data)

        return malwares_num, benigns_num, ip_malwares_num, stat_data

    def _parse_malware(self, data, malware=None):
        file_name, file_size, file_extension, file_path, hash, md5, sha1, sha256, sha512, ssdeep, report_path, report_id, date_created, date_modified, date_sent, time_sent, date_received, time_received, collection_date, collection_type, source_ip, destination_ip, source_url, destination_url, hostname, protocol, source_email, destination_email, source_country, destination_country, malware_type, source_dns, destination_dns, entropy, description, detected_by, detector_output, scan_time, warning_level = None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None
        # print('~~ data _parse_malware', data)
        if 'file_name' in data:
            file_name = data['file_name']
        if 'file_size' in data:
            file_size = data['file_size']
        if 'file_extension' in data:
            file_extension = data['file_extension']
        if 'file_path' in data:
            file_path = data['file_path']

        if 'hash' in data:
            hash = data['hash']
        if 'md5' in data:
            md5 = data['md5']
        if 'sha1' in data:
            sha1 = data['sha1']
        if 'sha256' in data:
            sha256 = data['sha256']
        if 'sha512' in data:
            sha512 = data['sha512']
        if 'ssdeep' in data:
            ssdeep = data['ssdeep']
        if 'report_path' in data:
            report_path = data['report_path']
        if 'report_id' in data:
            report_id = data['report_id']

        if 'date_created' in data:
            date_created = data['date_created']
        if 'date_modified' in data:
            date_modified = data['date_modified']

        if 'date_sent' in data:
            date_sent = data['date_sent']
        if 'time_sent' in data:
            time_sent = data['time_sent']
        if 'date_received' in data:
            date_received = data['date_received']
        if 'time_received' in data:
            time_received = data['time_received']

        if 'collection_date' in data:
            collection_date = data['collection_date']
        if 'collection_type' in data:
            collection_type = data['collection_type']
        if 'source_ip' in data:
            source_ip = data['source_ip']
        if 'destination_ip' in data:
            destination_ip = data['destination_ip']

        if 'source_url' in data:
            source_url = data['source_url']
        if 'destination_url' in data:
            destination_url = data['destination_url']
        if 'hostname' in data:
            hostname = data['hostname']
        if 'protocol' in data:
            protocol = data['protocol']

        if 'source_email' in data:
            source_email = data['source_email']
        if 'destination_email' in data:
            destination_email = data['destination_email']
        if 'source_country' in data:
            source_country = data['source_country']
        if 'destination_country' in data:
            destination_country = data['destination_country']

        if 'malware_type' in data:
            malware_type = data['malware_type']
        if 'source_dns' in data:
            source_dns = data['source_dns']
        if 'destination_dns' in data:
            destination_dns = data['destination_dns']
        if 'entropy' in data:
            entropy = data['entropy']

        if 'description' in data:
            description = data['description']
        if 'detected_by' in data:
            detected_by = data['detected_by']
        if 'detector_output' in data:
            detector_output = data['detector_output']
        if 'warning_level' in data:
            warning_level = data['warning_level']
        if 'scan_time' in data:
            scan_time = data['scan_time']

        if malware is None:
            malware = Capture(file_name=file_name, file_size=file_size, file_extension=file_extension, hash=hash,
                              md5=md5, sha1=sha1, sha256=sha256, sha512=sha512, ssdeep=ssdeep,
                              report_path=report_path,report_id=report_id,
                              date_created=date_created, date_modified=date_modified, date_sent=date_sent,
                              date_received=date_received, time_received=time_received, collection_date=collection_date,
                              collection_type=collection_type, source_ip=source_ip, destination_ip=destination_ip,
                              source_url=source_url, destination_url=destination_url, hostname=hostname,
                              protocol=protocol, source_email=source_email, destination_email=destination_email,
                              source_country=source_country, destination_country=destination_country,
                              malware_type=malware_type, source_dns=source_dns, destination_dns=destination_dns,
                              entropy=entropy, description=description, 
                              detected_by=detected_by, detector_output=detector_output,
                              scan_time=scan_time,
                              warning_level=warning_level)
        else:
            malware.file_name = file_name
            malware.file_size = file_size
            malware.file_extension = file_extension
            malware.file_path = file_path

            malware.hash = hash
            malware.md5 = md5
            malware.sha1 = sha1
            malware.sha256 = sha256
            malware.sha512 = sha512
            malware.ssdeep = ssdeep
            malware.report_path = report_path
            malware.report_id = report_id

            malware.date_created = date_created
            malware.date_modified = date_modified

            malware.date_sent = date_sent
            malware.time_sent = time_sent
            malware.date_received = date_received
            malware.time_received = time_received

            malware.collection_date = collection_date
            malware.collection_type = collection_type
            malware.source_ip = source_ip
            malware.destination_ip = destination_ip

            malware.source_url = source_url
            malware.destination_url = destination_url
            malware.hostname = hostname
            malware.protocol = protocol

            malware.source_email = source_email
            malware.destination_email = destination_email
            malware.source_country = source_country
            malware.destination_country = destination_country

            malware.malware_type = malware_type
            malware.source_dns = source_dns
            malware.destination_dns = destination_dns
            malware.entropy = entropy

            malware.description = description
            malware.detected_by = detected_by
            malware.detector_output = detector_output
            malware.scan_time = scan_time
            malware.warning_level = warning_level
        return malware
