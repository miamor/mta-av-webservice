from flask_restplus import Resource
from app.modules.common.decorator import token_required, admin_token_required
# from .capture import Capture
from .dto_capture import DtoCapture
# from .controller_capture import ControllerCapture
from flask import request, jsonify, abort
import os
import app.settings.cf as cf
import app.settings.fcn as fcn
# from werkzeug.datastructures import FileStorage
import datetime
# from werkzeug.utils import secure_filename

import sys
sys.path.insert(1, cf.__URLCHECKER_ROOT__)
import classifier as urlclassifier
import json

api = DtoCapture.api
capture = DtoCapture.model
# # controller = ControllerCapture()

# from ..detector.detection_module import Detector
# if not cf.set_detector:
#     cf.set_detector = True
#     cf.detector = Detector()


@api.route('/count')
class CaptureCount(Resource):
    def get(self):
        data = request.args
        mode = data['mode'] if 'mode' in data else ''
        # controller = ControllerCapture()
        cmd = cf.controllerCapture.get_query(mode=mode, filters=data)
        return cf.controllerCapture.count_all(cmd=cmd)

@api.route('')
class CaptureList(Resource):
    @api.marshal_list_with(capture)
    def get(self):
        data = request.args
        mode = data['mode'] if 'mode' in data else ''
        page = int(data['p']) if ('p' in data and data['p'] != 'undefined') else 0
        # controller = ControllerCapture()
        # print('[/capture/] GET data', data, 'page', page)
        cmd = cf.controllerCapture.get_query(mode=mode, filters=data)
        return cf.controllerCapture.get(cmd=cmd, page=page)

    @api.expect(capture)
    @api.marshal_with(capture)
    def post(self):
        # data = api.payload
        # data = request.form.to_dict(flat=True)
        data = request.get_json()
        data['hash'] = data['md5']
        print('data post METHOD~~~~', data)
        # controller = ControllerCapture()
        return cf.controllerCapture.create(data=data)



@api.route('/upload_file')
class CaptureUploadFile(Resource):
    # @api.marshal_with(capture)
    def post(self):
        print('request.files', request.files)
        # print('request.remote_addr', request.remote_addr)
        # print('request.form', request.form)

        # post_data = request.form.to_dict(flat=False)
        # print('post_data', post_data)
        # print("len(post_data['destination_ip'])", len(post_data['destination_ip']))
        # task_data = []
        # for i in range(len(post_data['destination_ip'])):
        #     tmp = {}
        #     for field in post_data:
        #         # print('i', i, post_data[field])
        #         # print(post_data[field][i])
        #         tmp[field] = post_data[field][i]
        #     if 'md5' in post_data:
        #         tmp['hash'] = post_data['md5'][i]
        #     if 'date_received' in post_data:
        #         tmp['date_received'] = post_data['date_received'][i]
        #     if 'time_received' in post_data:
        #         tmp['time_received'] = post_data['time_received'][i]
        #     task_data.append(tmp)
        # print('** task_data', task_data)

        # check if the post request has the file part
        if 'files[]' not in request.files:
            resp = jsonify(
                
                {"status": "error", "status_msg": "No file part in the request"})
            resp.status_code = 400
            return resp

        # controller = ControllerCapture()

        files = request.files.getlist('files[]')

        filepaths, task_ids = fcn.upload_file_submit_cuckoo(files)

        resp = jsonify({
            "status": "success",
            "filepaths": filepaths,
            # "filenames": filenames,
            "task_ids": task_ids
        })
        resp.status_code = 200

        return resp

# already has filepath, does not have task_ids list 
# (called by captured_network_component, 
# when don't need to upload files, 
# already has the file paths on the server, 
# just needs to submit to cuckoo)
@api.route('/check_notask')
class CaptureNoUploadFile(Resource):
    # @api.marshal_with(capture)
    def post(self):
        post_data = json.loads(request.json)
        filepaths = post_data['filepaths']
        task_data = post_data['task_data']

        # controller = ControllerCapture()

        # print('[/check_notask] filepaths', filepaths)

        for i in range(len(filepaths)):
            filepaths[i] = cf.CAPTURED_FOLDER+filepaths[i]

        task_ids = fcn.submit_cuckoo(filepaths)

        print('[POST /check_notask] task_ids', task_ids, 'filepaths', filepaths)

        # cf.waiting_tasks.put((filepaths, task_ids, task_data))
        # cf.__tasks_thread__.join()

        # cf.__tasks_to_process__.put((filepaths, task_ids, task_data))
        # cf.__tasks_process__.join()
        # fcn.fcn_check(cf.detector)
        # cf.controllerCapture.insert_db()
        cf.controllerCapture.insert_db_unprocessed(filepaths, task_ids, task_data)

        # res = cf.__tasks_process__.apply_async(cf.controllerCapture.check, [(filepaths, task_ids, task_data)])
        # task_data = res.get(timeout=1)
        # cf.controllerCapture.insert_db(task_ids, task_data)
        # return cf.controllerCapture.check(filepaths=filepaths, task_ids=task_ids, task_data=task_data)
        resp = jsonify({
            "status": "success",
            "filepaths": filepaths,
            "task_ids": task_ids,
            "message": "Added to Queue"
        })
        resp.status_code = 200
        return resp

# already has task_ids list (called after /upload API)
@api.route('/check')
class CaptureCheck(Resource):
    # @api.marshal_with(capture)
    def post(self):
        post_data = json.loads(request.json)
        filepaths = post_data['filepaths']
        task_ids = post_data['task_ids']
        task_data = post_data['task_data']
        # filenames = []
        # for filepath in filepaths:
        #     filenames.append(filepath.split('/')[-1])
        print('[POST /check] task_ids', task_ids, 'filepaths', filepaths)

        # controller = ControllerCapture()
        # cf.waiting_tasks.put((filepaths, task_ids, task_data))
        # cf.__tasks_thread__.join()

        # cf.__tasks_to_process__.put((filepaths, task_ids, task_data))
        # cf.__tasks_process__.join()
        # fcn.fcn_check(cf.detector)
        # cf.controllerCapture.insert_db()
        cf.controllerCapture.insert_db_unprocessed(filepaths, task_ids, task_data)

        # res = cf.__tasks_process__.apply_async(cf.controllerCapture.check, [(filepaths, task_ids, task_data)])
        # task_data = res.get(timeout=1)
        # cf.controllerCapture.insert_db(task_ids, task_data)
        # return cf.controllerCapture.check(filepaths=filepaths, task_ids=task_ids, task_data=task_data)
        resp = jsonify({
            "status": "success",
            "filepaths": filepaths,
            "task_ids": task_ids,
            "message": "Added to Queue"
        })
        resp.status_code = 200
        return resp

# parse a file, upload to server, then submit to cuckoo (called when user submit a file manually)
@api.route('/check_upload')
class CaptureCheckUpload(Resource):
    # @api.marshal_with(capture)
    def post(self):
        print('[/check_upload] request.files', request.files)
        # print('[/check_upload] request.remote_addr', request.remote_addr)
        print('[/check_upload] request.form', request.form)

        post_data = request.form.to_dict(flat=False)
        print('[/check_upload] post_data', post_data)
        # print("len(post_data['destination_ip'])", len(post_data['destination_ip']))

        # check if the post request has the file part
        if 'files[]' not in request.files:
            resp = jsonify(
                {"status": "error", "status_msg": "No file part in the request"})
            resp.status_code = 400
            return resp

        files = request.files.getlist('files[]')


        task_data = []
        for i in range(len(files)):
            tmp = {}
            for field in post_data:
                # print('i', i, post_data[field])
                # print(post_data[field][i])
                tmp[field] = post_data[field][i]
            # if 'md5' in post_data:
            #     tmp['hash'] = post_data['md5'][i]
            # if 'date_received' in post_data:
            #     tmp['date_received'] = post_data['date_received'][i]
            # if 'time_received' in post_data:
            #     tmp['time_received'] = post_data['time_received'][i]
            if 'source_ip' not in post_data:
                tmp['source_ip'] = request.remote_addr
            task_data.append(tmp)
        print('** task_data', task_data)

        # controller = ControllerCapture()

        # print('~~~cf.detector', cf.detector)
        # filepaths, task_ids = [], []

        filepaths, task_ids = fcn.upload_file_submit_cuckoo(files)

        # cf.waiting_tasks.put((filepaths, task_ids, task_data))
        # cf.__tasks_thread__.join()

        # cf.__tasks_to_process__.put((filepaths, task_ids, task_data))
        # cf.__tasks_process__.join()
        # fcn.fcn_check(cf.detector)
        # cf.controllerCapture.insert_db()
        cf.controllerCapture.insert_db_unprocessed(filepaths, task_ids, task_data)


        # task_data = cf.__tasks_process__.imap_unordered(cf.controllerCapture.check, [(filepaths, task_ids, task_data)])
        # task_data = res.get(timeout=1)
        # print('task_data', task_data)
        # cf.controllerCapture.insert_db(task_ids, task_data)
        # return cf.controllerCapture.check(filepaths=filepaths, task_ids=task_ids, task_data=task_data)
        resp = jsonify({
            "status": "success",
            "filepaths": filepaths,
            "task_ids": task_ids,
            "message": "Added to Queue"
        })
        resp.status_code = 200
        return resp


@api.route('/download_file')
class CaptureDownload(Resource):
    # @api.marshal_with(capture)
    def get(self):
        path = '/home/mtaav/CODE/mta-av-webservice/Update'
        lstFile = os.listdir(path)
        date = str(datetime.datetime.now().strftime('%d-%m-%Y'))
        for item in lstFile:
            # print(item.split('.')[0])
            if (date == item.split('.')[0]):
                return send_file(os.path.join(path, item), as_attachment=True)
        abort(404, 'not available')


@api.route('/<int:cid>')
class Capture(Resource):
    @api.marshal_with(capture)
    def get(self, cid):
        # print('[/capture/<int>] *** cid', cid)
        # controller = ControllerCapture()
        return cf.controllerCapture.get_by_id(object_id=cid)

    # @api.expect(capture)
    # def put(self, cid):
    #     data = api.payload
    #     # controller = ControllerCapture()
    #     return cf.controllerCapture.update(object_id=cid, data=data)

    def delete(self, cid):
        # controller = ControllerCapture()
        return cf.controllerCapture.delete(object_id=cid)


@api.route('/report/<int:report_id>')
class CaptureReport(Resource):
    def get(self, report_id):
        # controller = ControllerCapture()
        return cf.controllerCapture.get_report_by_id(report_id=report_id)


@api.route('/stat')
class CaptureStat(Resource):
    def get(self):
        # controller = ControllerCapture()
        # mal_num, ip_mal_num, stat_by_date, top_ip_mal, top_ip_send, top_ip_rev_mal = cf.controllerCapture.stat()
        stat_data = cf.controllerCapture.stat()
        resp = jsonify({
            "status": "success",
            "stat_data": stat_data
            # "charts": charts
        })
        resp.status_code = 200
        return resp
@api.route('/stat_by_date')
class CaptureStatDate(Resource):
    def get(self):
        data = request.args
        split = int(data['split']) if 'split' in data else 10000
        days = int(data['days']) if 'days' in data else 10
        stat_by_date_data = cf.controllerCapture.stat_by_date(days, split)
        resp = jsonify({
            "status": "success",
            "stat_by_date": stat_by_date_data
            # "charts": charts
        })
        resp.status_code = 200
        return resp


@api.route('/search/<string:capture_hash>')
class CaptureSearchHash(Resource):
    @api.marshal_with(capture)
    def get(self, capture_hash):
        data = request.args
        # mode = int(data['mode']) if 'mode' in data else 0
        mode = data['mode'] if 'mode' in data else ''
        print('mode = ', mode)
        # controller = ControllerCapture()
        return cf.controllerCapture.get_by_hash(object_hash=capture_hash, mode=mode)

#     @api.expect(capture)
#     def put(self, capture_hash):
#         data = api.payload
#         # controller = ControllerCapture()
#         return cf.controllerCapture.update(object_hash=capture_hash, data=data)

#     def delete(self, capture_hash):
#         # controller = ControllerCapture()
#         return cf.controllerCapture.delete(object_hash=capture_hash)





# @api.route('/gen_report')
# class CaptureGenReport(Resource):
#     # @api.marshal_with(capture)
#     def post(self):
#         print('request.files', request.files)
#         print('request.remote_addr', request.remote_addr)
#         print('request.form', request.form)

#         # check if the post request has the file part
#         if 'files[]' not in request.files:
#             resp = jsonify(
#                 {"status": "error", "status_msg": "No file part in the request"})
#             resp.status_code = 400
#             return resp

#         files = request.files.getlist('files[]')

#         filenames = []
#         filepaths = []
#         for i in range(len(files)):
#             file = files[i]

#             if file.filename == "":
#                 continue

#             # if file and allowed_file(file.filename):
#             if file:
#                 filename = secure_filename(file.filename)
#                 filepath = os.path.join(cf.UPLOAD_FOLDER, filename)
#                 file.save(filepath)

#                 filenames.append(filename)
#                 filepaths.append(filepath)


#         # controller = ControllerCapture()
#         return cf.controllerCapture.gen_report(filepaths=filepaths, filenames=filenames)
